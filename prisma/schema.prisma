generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  SUPER_USER
  USER
  AGENT_SAISIE
}

enum Status {
  DRAFT
  PENDING_REVIEW
  APPROVED
  REJECTED
}

enum EmissionModule {
  energy
  waste
}

model Organization {
  id             String           @id @default(cuid())
  name           String
  settings       Json             @default(json_object('campaignStartMonth', 9, 'defaultLocale', 'fr'))
  createdAt      DateTime         @default(now())
  sites          Site[]
  users          User[]
  emissionFactors EmissionFactor[]
  scenarios      Scenario[]
}

model Site {
  id              String    @id @default(cuid())
  name            String
  organizationId  String
  organization    Organization @relation(fields: [organizationId], references: [id])
  societe         String?
  bu              String?
  activite        String?
  filiere         String?
  region          String?
  energyRecords   EnergyRecord[]
  waterRecords    WaterRecord[]
  wasteRecords    WasteRecord[]
  socialActions   SocialAction[]
  productionRecords ProductionRecord[]
  users           User[]    @relation("SiteUsers")
}

model User {
  id             String   @id @default(cuid())
  name           String
  email          String   @unique
  role           Role
  passwordHash   String?
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  siteAccesses   Site[]   @relation("SiteUsers")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  createdEnergyRecords   EnergyRecord[] @relation("EnergyCreatedBy")
  validatedEnergyRecords EnergyRecord[] @relation("EnergyValidatedBy")
  createdWaterRecords    WaterRecord[] @relation("WaterCreatedBy")
  validatedWaterRecords  WaterRecord[] @relation("WaterValidatedBy")
  createdWasteRecords    WasteRecord[] @relation("WasteCreatedBy")
  validatedWasteRecords  WasteRecord[] @relation("WasteValidatedBy")
  createdSocialActions   SocialAction[] @relation("SocialCreatedBy")
  validatedSocialActions SocialAction[] @relation("SocialValidatedBy")
  createdProductionRecords ProductionRecord[] @relation("ProductionCreatedBy")
  validatedProductionRecords ProductionRecord[] @relation("ProductionValidatedBy")
  accounts       Account[]
  sessions       Session[]
}

model EnergyRecord {
  id            String  @id @default(cuid())
  year          Int
  month         Int
  period        DateTime @default(now())
  siteId        String
  site          Site    @relation(fields: [siteId], references: [id])
  type          String
  unit          String
  value         Decimal @db.Decimal(18, 4)
  status        Status  @default(DRAFT)
  createdById   String
  createdBy     User    @relation("EnergyCreatedBy", fields: [createdById], references: [id])
  validatedById String?
  validatedBy   User?   @relation("EnergyValidatedBy", fields: [validatedById], references: [id])
  validatedAt   DateTime?
  source        String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model WaterRecord {
  id            String  @id @default(cuid())
  year          Int
  month         Int
  period        DateTime @default(now())
  siteId        String
  site          Site    @relation(fields: [siteId], references: [id])
  familleCulture String
  variete       String
  eau_m3        Decimal @db.Decimal(18, 4)
  status        Status  @default(DRAFT)
  createdById   String
  createdBy     User    @relation("WaterCreatedBy", fields: [createdById], references: [id])
  validatedById String?
  validatedBy   User?   @relation("WaterValidatedBy", fields: [validatedById], references: [id])
  validatedAt   DateTime?
  source        String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model WasteRecord {
  id            String  @id @default(cuid())
  year          Int
  month         Int
  period        DateTime @default(now())
  siteId        String
  site          Site    @relation(fields: [siteId], references: [id])
  categorie     String
  unit          String
  value         Decimal @db.Decimal(18, 4)
  status        Status  @default(DRAFT)
  createdById   String
  createdBy     User    @relation("WasteCreatedBy", fields: [createdById], references: [id])
  validatedById String?
  validatedBy   User?   @relation("WasteValidatedBy", fields: [validatedById], references: [id])
  validatedAt   DateTime?
  source        String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model SocialAction {
  id            String  @id @default(cuid())
  year          Int
  month         Int
  period        DateTime @default(now())
  siteId        String
  site          Site    @relation(fields: [siteId], references: [id])
  action        String
  budget        Decimal @db.Decimal(18, 2)
  beneficiaries Int
  status        Status  @default(DRAFT)
  createdById   String
  createdBy     User    @relation("SocialCreatedBy", fields: [createdById], references: [id])
  validatedById String?
  validatedBy   User?   @relation("SocialValidatedBy", fields: [validatedById], references: [id])
  validatedAt   DateTime?
  source        String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model ProductionRecord {
  id            String  @id @default(cuid())
  year          Int
  month         Int
  period        DateTime @default(now())
  siteId        String
  site          Site    @relation(fields: [siteId], references: [id])
  familleCulture String
  variete       String
  sup_ha        Decimal @db.Decimal(18, 4)
  prod_kg       Decimal @db.Decimal(18, 4)
  status        Status  @default(DRAFT)
  createdById   String
  createdBy     User    @relation("ProductionCreatedBy", fields: [createdById], references: [id])
  validatedById String?
  validatedBy   User?   @relation("ProductionValidatedBy", fields: [validatedById], references: [id])
  validatedAt   DateTime?
  source        String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model EmissionFactor {
  id               String  @id @default(cuid())
  organizationId   String
  organization     Organization @relation(fields: [organizationId], references: [id])
  module           EmissionModule
  sourceType       String
  unit             String
  kgco2ePerUnit    Decimal @db.Decimal(18, 6)
  validFrom        DateTime?
  validTo          DateTime?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Scenario {
  id                 String  @id @default(cuid())
  organizationId     String
  organization       Organization @relation(fields: [organizationId], references: [id])
  name               String
  description        String?
  applyFromCampaign  String
  active             Boolean @default(false)
  reductions         ScenarioReduction[]
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model ScenarioReduction {
  id             String  @id @default(cuid())
  scenarioId     String
  scenario       Scenario @relation(fields: [scenarioId], references: [id])
  module         EmissionModule
  siteId         String?
  site           Site?    @relation(fields: [siteId], references: [id])
  filterField    String
  filterValue    String
  reductionType  String
  reductionValue Decimal @db.Decimal(18, 4)
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
